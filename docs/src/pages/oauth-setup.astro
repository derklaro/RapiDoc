---
import GlobalLayout from '../layouts/GlobalLayout.astro';
import PageBanner from '../components/PageBanner.astro';
---

<GlobalLayout>
  <PageBanner slot="topbar" page="example-list" showWaves = {true} />
  <main>
    <h1> Setting up OAuth with RapiDoc</h1>
    <hr/>

    <h2> Demo </h2>
      <ul>
        <li> Here is a minimal sample spec containing OAuth Authentication schemes (<a href="https://github.com/rapi-doc/RapiDoc/blob/master/docs/specs/oauth.yaml" target="_blank"> view </a> )</li>
        <li> Here is how it is rendered in RapiDoc (<a href="./examples/oauth-demo.html"> view </a>)</li>
      </ul>  
    <h2> Short Version </h2>
    <ul>
      <li> Register your app with an Authorization Provider such as Microsoft Active Directory </li>
      <li> Create <span class='mono orange'> index.html </span>containing <span class='mono orange'> &lt;rapi-doc&gt;</span> element (<a href="#index-html"> view </a>)</li> 
      <li> Create another html and name it <span class='mono orange'> oauth-receiver.html </span> containing <span class='mono orange'> &lt;oauth-receiver&gt;</span> element (<a href="#auth-receiver-html"> view </a>)</li>
    </ul>
    You are all set !!!
    <br/>

    <h2> The Long story </h2>
    <h3> Overall flow  (Authorization Code)</h3>
    <img style="width:720px" src="/assets/images/oauth-auth-code.png" />

    <h3>Register client with Authorization Server</h3>
    <p>
      <ul>
        <li>
          For this demo I am going to use <a href="https://demo.duendesoftware.com/" target="_blank"> <b>IdentityServer</b> </a>  as the OAuth provider. 
          This is a demo Identity provider which is pre-configured with some users and supports various oAuth authentication flows
        </li>
        <li>
          <b>Register OAuth Client with identity Provider:</b> Normally you need to register your client application with the Identity provider which will provide you with a <span class='mono bold'> client-id and client-secret</span>
          but in our case we donot need to do so because our demo identity server is pre-configured with some sample client-id and secret 
        </li>
      </ul>
    </p>

    <h3> Setup RapiDoc </h3>
    Below are the two files that you need to have<br/>
    <ul>
      <li> 
          <span class="mono yellow bold">index.html </span> 
          <span> (I am using the name index.html but you are free to use any name, it is the html that contain &lt;rapi-doc&gt; element) </span>
      </li>
      <li> 
        <span class="mono yellow bold">oauth-receiver.html </span>
        <span>(It is important that you name this file exactly as oauth-receiver.html and place in the same location where the above file is)</span>
      </li>
    </ul>
    <br/>

    <span class="yellow mono">index.html</span>
    (This is our main file that contains the  <span class='mono'> &lt;rapi-doc&gt;</span>  element )
    <pre>
      <code class="language-html code-block">
      {`
      <!doctype html>
      <head>
        <script type="module" src="https://unpkg.com/rapidoc/dist/rapidoc-min.js"></script>
      </head>
      <body>
        <rapi-doc spec-url = "https://mrin9.github.io/RapiDoc/specs/oauth.yaml" >
        </rapi-doc>
      </body>
      `}
      </code>
    </pre>
    <br/>

    <a id='auth-receiver-html' class="blue mono"> oauth-receiver.html </a><br/>
    the <span class='mono yellow'> &lt;oauth-receiver&gt;</span> custom element in this file, 
    requests for an Authorization Code from Authorization Server by providing client_id and redirect URL. 
    Upon receiving a valid auth-code, it passes to <span class='mono yellow'> &lt;rapi-doc&gt;</span> element.
    RapiDoc, then uses this Auth-Code to request for the <span class="yellow">Access Token </span>. 
    <pre>
      <code class="language-html code-block">
      {`
      <!doctype html>
      <head>
        <script type="module" src="https://unpkg.com/rapidoc/dist/rapidoc-min.js"></script>
      </head>

      <body>
        <oauth-receiver> </oauth-receiver>
      </body>
      `}
      </code>
    </pre>

    <h3 id='oauth-demo-spec'> The OpenAPI spec </h3>
    Our demo Identity server provides few sample APIs for testing. 
    <br/>
    Below is the OpenAPI spec which contains couple of APIs protected with identity server. 
    You can check out how these are rendered through RapiDoc and how rapidoc exchanges oAuth tokens with the demo IdentityServer
    | <a href="./examples/oauth-demo.html" target="_blank"> Demo </a>
    <pre class="code-block">
      <code class="language-yaml">
      {`
        openapi: 3.0.0
        info:
          title: Identity 4 Server
          description: Test case for oAuth flows
          version: "1.0"
        servers:
        - url:  https://demo.duendesoftware.com
        paths:
          /api/test:
            get:
              summary: Test API
              security:
                - short-lived-oauth:
                - long-lived-oauth:
              responses:
                '200':
                  description: Successful operation
          /connect/userinfo:
            get:
              summary: Get User Info
              security:
                - short-lived-oauth:
                  - openid
                  - email
                  - profile
                - long-lived-oauth:
                  - openid
                  - email
                  - profile
              responses:
                '200':
                  description: Successful operation
        components:
          securitySchemes:
            short-lived-oauth:
              type: oauth2
              description: Provides OAuth token valid for short duration ~75 seconds
              
              # pre filling client-id, secret and scopes for (ALL flows)
              x-client-id: interactive.confidential.short
              x-client-secret: secret
              x-default-scopes:
                openid

              flows:
                authorizationCode:
                  authorizationUrl: https://demo.duendesoftware.com/connect/authorize
                  tokenUrl: https://demo.identityserver.io/connect/token
                  scopes:
                    openid: OpenID
                    email: Email 
                    profile: Profile 
            long-lived-oauth:
              type: oauth2
              description: Provides an OAuth token thats valid for long durations
              flows:
                authorizationCode:
                  authorizationUrl: https://demo.duendesoftware.com/connect/authorize
                  tokenUrl: https://demo.identityserver.io/connect/token
                  scopes:
                    openid: OpenID
                    email: Email 
                    profile: Profile 

                  # pre filling client-id, secret and scopes for (SPECIFIC flow)
                  x-client-id: interactive.confidential
                  x-client-secret: secret
                  x-default-scopes:
                    openid
                  # when x-pkce-only=true, it will not allow to provide or send client_secret through the UI  
                  x-pkce-only: true
      `}            
      </code>
    </pre>
    
 


  </main>
</GlobalLayout>

<style>

</style>