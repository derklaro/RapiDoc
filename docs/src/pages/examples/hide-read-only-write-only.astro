---
import ExampleLayout from '../../layouts/ExampleLayout.astro';
import { getSpecUrl } from '../../utils/getSpecUrl';

const specUrl = getSpecUrl(Astro.url);
---

<ExampleLayout>
  <rapi-doc 
    id = "thedoc"
    spec-url = {specUrl}
    show-info = "false"
    show-header = "false"
    allow-authentication = "false"
    allow-server-selection = 'false'
    allow-try = "false"
    default-schema-tab = "schema"
    schema-style = "table"
  > 
    <div slot="nav-logo" style="display:flex; flex-direction: column; align-items: center; height:180px; gap:16px">
      <div style="text-align:center;">
        <span class="bold yellow small-font" style="line-height:28px;">Hide ReadOnly Properties</span>
        <div class="small-font" style="display:flex; gap:10px; align-items: center;">
          <div>
            <input type="checkbox" id="read-only-never" onclick="toggleNeverHideReadOnly(this)" />
            <label for="read-only-never">never</label>
          </div>
          <div>
            <input type="checkbox" class="read-only-option" id="read-only-post" value="post" onclick="toggleReadOnly('post')" />
            <label for="read-only-post">post</label>
          </div>
          <div>
            <input type="checkbox" class="read-only-option" id="read-only-put" value="put" onclick="toggleReadOnly('put')" />
            <label for="read-only-put">put</label>
          </div>
          <div>
            <input type="checkbox" class="read-only-option" id="read-only-patch" value="patch" onclick="toggleReadOnly('patch')" />
            <label for="read-only-patch">patch</label>
          </div>
        </div>
      </div>
      
      <div style="text-align:center;">
        <span class="bold yellow small-font" style="line-height:28px;">Hide WriteOnly Properties</span>
        <div>
          <input type="checkbox" id="write-only-never" onclick="toggleNeverHideWriteOnly(this)"/><label for="write-only-never">never</label>
        </div>
      </div>  

      <button class="btn" style="width:150px" onclick="toggleSchemaStyle()">Toggle Schema Style</button>

    </div>  

  </rapi-doc>
</ExampleLayout>


<script is:inline>

  function toggleReadOnly(value) {
    const el = document.getElementById('read-only-' + value);
    const neverBox = document.getElementById('read-only-never');
    const options = document.getElementsByClassName('read-only-option');
    neverBox.checked = false;
    let optionsStr = '';
    Array.prototype.forEach.call(options, function (el) {
      if (el.checked) {
        optionsStr = optionsStr + ' ' + el.value;
      }
    });

    if (optionsStr.trim() === '') {
      rapidocEl.removeAttribute('schema-hide-read-only');
      rapidocEl.connectedCallback();
    } else {
      rapidocEl.setAttribute('schema-hide-read-only', optionsStr);
    }
  }

  function toggleNeverHideReadOnly(neverBox) {
    const options = document.getElementsByClassName('read-only-option');
    if (neverBox.checked) {
      Array.prototype.forEach.call(options, function (el) {
        el.checked = false;
      });
      rapidocEl.setAttribute('schema-hide-read-only', 'never');
    } else {
      rapidocEl.removeAttribute('schema-hide-read-only');
      rapidocEl.connectedCallback();
    }
  }

  function toggleNeverHideWriteOnly(neverBox) {
    if (neverBox.checked) {
      rapidocEl.setAttribute('schema-hide-write-only', 'never');
    } else {
      rapidocEl.removeAttribute('schema-hide-write-only');
      rapidocEl.connectedCallback();
    }
  }
</script>
